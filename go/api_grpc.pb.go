// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrintServiceClient is the client API for PrintService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrintServiceClient interface {
	Print(ctx context.Context, in *Line, opts ...grpc.CallOption) (*empty.Empty, error)
	Blank(ctx context.Context, in *BlankLines, opts ...grpc.CallOption) (*empty.Empty, error)
	QR(ctx context.Context, in *QRCode, opts ...grpc.CallOption) (*empty.Empty, error)
	Bar(ctx context.Context, in *Barcode, opts ...grpc.CallOption) (*empty.Empty, error)
	PrintImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*empty.Empty, error)
}

type printServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrintServiceClient(cc grpc.ClientConnInterface) PrintServiceClient {
	return &printServiceClient{cc}
}

func (c *printServiceClient) Print(ctx context.Context, in *Line, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.PrintService/Print", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printServiceClient) Blank(ctx context.Context, in *BlankLines, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.PrintService/Blank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printServiceClient) QR(ctx context.Context, in *QRCode, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.PrintService/QR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printServiceClient) Bar(ctx context.Context, in *Barcode, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.PrintService/Bar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printServiceClient) PrintImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.PrintService/PrintImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrintServiceServer is the server API for PrintService service.
// All implementations must embed UnimplementedPrintServiceServer
// for forward compatibility
type PrintServiceServer interface {
	Print(context.Context, *Line) (*empty.Empty, error)
	Blank(context.Context, *BlankLines) (*empty.Empty, error)
	QR(context.Context, *QRCode) (*empty.Empty, error)
	Bar(context.Context, *Barcode) (*empty.Empty, error)
	PrintImage(context.Context, *Image) (*empty.Empty, error)
	mustEmbedUnimplementedPrintServiceServer()
}

// UnimplementedPrintServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrintServiceServer struct {
}

func (UnimplementedPrintServiceServer) Print(context.Context, *Line) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Print not implemented")
}
func (UnimplementedPrintServiceServer) Blank(context.Context, *BlankLines) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blank not implemented")
}
func (UnimplementedPrintServiceServer) QR(context.Context, *QRCode) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QR not implemented")
}
func (UnimplementedPrintServiceServer) Bar(context.Context, *Barcode) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bar not implemented")
}
func (UnimplementedPrintServiceServer) PrintImage(context.Context, *Image) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintImage not implemented")
}
func (UnimplementedPrintServiceServer) mustEmbedUnimplementedPrintServiceServer() {}

// UnsafePrintServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrintServiceServer will
// result in compilation errors.
type UnsafePrintServiceServer interface {
	mustEmbedUnimplementedPrintServiceServer()
}

func RegisterPrintServiceServer(s grpc.ServiceRegistrar, srv PrintServiceServer) {
	s.RegisterService(&PrintService_ServiceDesc, srv)
}

func _PrintService_Print_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Line)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintServiceServer).Print(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PrintService/Print",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintServiceServer).Print(ctx, req.(*Line))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrintService_Blank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlankLines)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintServiceServer).Blank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PrintService/Blank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintServiceServer).Blank(ctx, req.(*BlankLines))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrintService_QR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QRCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintServiceServer).QR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PrintService/QR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintServiceServer).QR(ctx, req.(*QRCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrintService_Bar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Barcode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintServiceServer).Bar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PrintService/Bar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintServiceServer).Bar(ctx, req.(*Barcode))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrintService_PrintImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintServiceServer).PrintImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PrintService/PrintImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintServiceServer).PrintImage(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

// PrintService_ServiceDesc is the grpc.ServiceDesc for PrintService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrintService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PrintService",
	HandlerType: (*PrintServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Print",
			Handler:    _PrintService_Print_Handler,
		},
		{
			MethodName: "Blank",
			Handler:    _PrintService_Blank_Handler,
		},
		{
			MethodName: "QR",
			Handler:    _PrintService_QR_Handler,
		},
		{
			MethodName: "Bar",
			Handler:    _PrintService_Bar_Handler,
		},
		{
			MethodName: "PrintImage",
			Handler:    _PrintService_PrintImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
