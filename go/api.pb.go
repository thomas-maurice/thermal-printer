// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Line struct {
	Line                 string   `protobuf:"bytes,1,opt,name=line,proto3" json:"line,omitempty"`
	Font                 int64    `protobuf:"varint,2,opt,name=font,proto3" json:"font,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Line) Reset()         { *m = Line{} }
func (m *Line) String() string { return proto.CompactTextString(m) }
func (*Line) ProtoMessage()    {}
func (*Line) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Line) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Line.Unmarshal(m, b)
}
func (m *Line) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Line.Marshal(b, m, deterministic)
}
func (m *Line) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Line.Merge(m, src)
}
func (m *Line) XXX_Size() int {
	return xxx_messageInfo_Line.Size(m)
}
func (m *Line) XXX_DiscardUnknown() {
	xxx_messageInfo_Line.DiscardUnknown(m)
}

var xxx_messageInfo_Line proto.InternalMessageInfo

func (m *Line) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

func (m *Line) GetFont() int64 {
	if m != nil {
		return m.Font
	}
	return 0
}

type BlankLines struct {
	Number int32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// font should be 0 or 1, usually 0 is a bigger font
	Font                 int64    `protobuf:"varint,2,opt,name=font,proto3" json:"font,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlankLines) Reset()         { *m = BlankLines{} }
func (m *BlankLines) String() string { return proto.CompactTextString(m) }
func (*BlankLines) ProtoMessage()    {}
func (*BlankLines) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *BlankLines) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlankLines.Unmarshal(m, b)
}
func (m *BlankLines) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlankLines.Marshal(b, m, deterministic)
}
func (m *BlankLines) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlankLines.Merge(m, src)
}
func (m *BlankLines) XXX_Size() int {
	return xxx_messageInfo_BlankLines.Size(m)
}
func (m *BlankLines) XXX_DiscardUnknown() {
	xxx_messageInfo_BlankLines.DiscardUnknown(m)
}

var xxx_messageInfo_BlankLines proto.InternalMessageInfo

func (m *BlankLines) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *BlankLines) GetFont() int64 {
	if m != nil {
		return m.Font
	}
	return 0
}

type QRCode struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	PixelSize            int64    `protobuf:"varint,2,opt,name=pixel_size,json=pixelSize,proto3" json:"pixel_size,omitempty"`
	Center               bool     `protobuf:"varint,3,opt,name=center,proto3" json:"center,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QRCode) Reset()         { *m = QRCode{} }
func (m *QRCode) String() string { return proto.CompactTextString(m) }
func (*QRCode) ProtoMessage()    {}
func (*QRCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *QRCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QRCode.Unmarshal(m, b)
}
func (m *QRCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QRCode.Marshal(b, m, deterministic)
}
func (m *QRCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QRCode.Merge(m, src)
}
func (m *QRCode) XXX_Size() int {
	return xxx_messageInfo_QRCode.Size(m)
}
func (m *QRCode) XXX_DiscardUnknown() {
	xxx_messageInfo_QRCode.DiscardUnknown(m)
}

var xxx_messageInfo_QRCode proto.InternalMessageInfo

func (m *QRCode) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *QRCode) GetPixelSize() int64 {
	if m != nil {
		return m.PixelSize
	}
	return 0
}

func (m *QRCode) GetCenter() bool {
	if m != nil {
		return m.Center
	}
	return false
}

type Barcode struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Center               bool     `protobuf:"varint,2,opt,name=center,proto3" json:"center,omitempty"`
	Blanks               int32    `protobuf:"varint,3,opt,name=blanks,proto3" json:"blanks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Barcode) Reset()         { *m = Barcode{} }
func (m *Barcode) String() string { return proto.CompactTextString(m) }
func (*Barcode) ProtoMessage()    {}
func (*Barcode) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *Barcode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Barcode.Unmarshal(m, b)
}
func (m *Barcode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Barcode.Marshal(b, m, deterministic)
}
func (m *Barcode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Barcode.Merge(m, src)
}
func (m *Barcode) XXX_Size() int {
	return xxx_messageInfo_Barcode.Size(m)
}
func (m *Barcode) XXX_DiscardUnknown() {
	xxx_messageInfo_Barcode.DiscardUnknown(m)
}

var xxx_messageInfo_Barcode proto.InternalMessageInfo

func (m *Barcode) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Barcode) GetCenter() bool {
	if m != nil {
		return m.Center
	}
	return false
}

func (m *Barcode) GetBlanks() int32 {
	if m != nil {
		return m.Blanks
	}
	return 0
}

type Image struct {
	ImageData            []byte   `protobuf:"bytes,1,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetImageData() []byte {
	if m != nil {
		return m.ImageData
	}
	return nil
}

func init() {
	proto.RegisterType((*Line)(nil), "proto.Line")
	proto.RegisterType((*BlankLines)(nil), "proto.BlankLines")
	proto.RegisterType((*QRCode)(nil), "proto.QRCode")
	proto.RegisterType((*Barcode)(nil), "proto.Barcode")
	proto.RegisterType((*Image)(nil), "proto.Image")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4e, 0x02, 0x31,
	0x10, 0x86, 0xdd, 0x85, 0x05, 0x77, 0x44, 0x13, 0x7b, 0x20, 0x04, 0x63, 0x42, 0xf6, 0x60, 0xb8,
	0x58, 0x12, 0xf5, 0x60, 0xe2, 0x6d, 0xd5, 0x83, 0x89, 0x26, 0x52, 0x6e, 0x5e, 0x48, 0x59, 0x0a,
	0x69, 0x5c, 0xda, 0x4d, 0x29, 0x46, 0x79, 0x04, 0x9f, 0xda, 0x74, 0x5a, 0xc4, 0x83, 0x70, 0xea,
	0xfc, 0x93, 0x7e, 0x33, 0xed, 0x07, 0x29, 0xaf, 0x24, 0xad, 0x8c, 0xb6, 0x9a, 0x24, 0x78, 0x74,
	0xcf, 0xe6, 0x5a, 0xcf, 0x4b, 0x31, 0xc0, 0x34, 0x59, 0xcd, 0x06, 0x62, 0x51, 0xd9, 0x2f, 0x7f,
	0x27, 0xa3, 0x50, 0x7f, 0x96, 0x4a, 0x10, 0x02, 0xf5, 0x52, 0x2a, 0xd1, 0x89, 0x7a, 0x51, 0x3f,
	0x65, 0x58, 0xbb, 0xde, 0x4c, 0x2b, 0xdb, 0x89, 0x7b, 0x51, 0xbf, 0xc6, 0xb0, 0xce, 0x6e, 0x01,
	0xf2, 0x92, 0xab, 0x77, 0x07, 0x2d, 0x49, 0x1b, 0x1a, 0x6a, 0xb5, 0x98, 0x08, 0x83, 0x5c, 0xc2,
	0x42, 0xfa, 0x97, 0x1c, 0x41, 0x63, 0xc8, 0xee, 0xf5, 0x14, 0xe7, 0x16, 0x7a, 0xfa, 0xbb, 0xcb,
	0xd5, 0xe4, 0x1c, 0xa0, 0x92, 0x9f, 0xa2, 0x1c, 0x2f, 0xe5, 0x5a, 0x04, 0x2e, 0xc5, 0xce, 0x48,
	0xae, 0x85, 0x5b, 0x54, 0x08, 0x65, 0x85, 0xe9, 0xd4, 0x7a, 0x51, 0xff, 0x90, 0x85, 0x94, 0xbd,
	0x40, 0x33, 0xe7, 0xa6, 0xd8, 0x35, 0x75, 0x8b, 0xc5, 0x7f, 0x31, 0xd7, 0x9f, 0xb8, 0x5f, 0x2c,
	0x71, 0x5c, 0xc2, 0x42, 0xca, 0x2e, 0x20, 0x79, 0x5a, 0xf0, 0x39, 0x3e, 0x47, 0xba, 0x62, 0x3c,
	0xe5, 0x96, 0xe3, 0xc8, 0x16, 0x4b, 0xb1, 0xf3, 0xc0, 0x2d, 0xbf, 0xfa, 0x8e, 0xa1, 0xf5, 0x6a,
	0xa4, 0xb2, 0x23, 0x61, 0x3e, 0x64, 0x21, 0x08, 0x85, 0x04, 0x33, 0x39, 0xf2, 0x5e, 0xa9, 0xf3,
	0xd3, 0x6d, 0x53, 0xaf, 0x9e, 0x6e, 0xd4, 0xd3, 0x47, 0xa7, 0x3e, 0x3b, 0x20, 0x37, 0x90, 0xa0,
	0x46, 0x72, 0x1a, 0xee, 0x6f, 0xa5, 0xee, 0xa1, 0x2e, 0x21, 0x1e, 0x32, 0x72, 0x1c, 0x10, 0x6f,
	0x73, 0xcf, 0xf5, 0x01, 0xd4, 0x72, 0x6e, 0xc8, 0xc9, 0x66, 0x85, 0x17, 0xb5, 0xf7, 0x55, 0x80,
	0xbf, 0xf0, 0x0e, 0x5a, 0x81, 0xc3, 0xb4, 0x9b, 0xca, 0xd3, 0xb7, 0x26, 0xbd, 0xf3, 0xdd, 0x06,
	0x1e, 0xd7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xd5, 0x75, 0xa0, 0x85, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PrintServiceClient is the client API for PrintService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrintServiceClient interface {
	Print(ctx context.Context, in *Line, opts ...grpc.CallOption) (*empty.Empty, error)
	Blank(ctx context.Context, in *BlankLines, opts ...grpc.CallOption) (*empty.Empty, error)
	QR(ctx context.Context, in *QRCode, opts ...grpc.CallOption) (*empty.Empty, error)
	Bar(ctx context.Context, in *Barcode, opts ...grpc.CallOption) (*empty.Empty, error)
	PrintImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*empty.Empty, error)
}

type printServiceClient struct {
	cc *grpc.ClientConn
}

func NewPrintServiceClient(cc *grpc.ClientConn) PrintServiceClient {
	return &printServiceClient{cc}
}

func (c *printServiceClient) Print(ctx context.Context, in *Line, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.PrintService/Print", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printServiceClient) Blank(ctx context.Context, in *BlankLines, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.PrintService/Blank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printServiceClient) QR(ctx context.Context, in *QRCode, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.PrintService/QR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printServiceClient) Bar(ctx context.Context, in *Barcode, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.PrintService/Bar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printServiceClient) PrintImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.PrintService/PrintImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrintServiceServer is the server API for PrintService service.
type PrintServiceServer interface {
	Print(context.Context, *Line) (*empty.Empty, error)
	Blank(context.Context, *BlankLines) (*empty.Empty, error)
	QR(context.Context, *QRCode) (*empty.Empty, error)
	Bar(context.Context, *Barcode) (*empty.Empty, error)
	PrintImage(context.Context, *Image) (*empty.Empty, error)
}

// UnimplementedPrintServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPrintServiceServer struct {
}

func (*UnimplementedPrintServiceServer) Print(ctx context.Context, req *Line) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Print not implemented")
}
func (*UnimplementedPrintServiceServer) Blank(ctx context.Context, req *BlankLines) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blank not implemented")
}
func (*UnimplementedPrintServiceServer) QR(ctx context.Context, req *QRCode) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QR not implemented")
}
func (*UnimplementedPrintServiceServer) Bar(ctx context.Context, req *Barcode) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bar not implemented")
}
func (*UnimplementedPrintServiceServer) PrintImage(ctx context.Context, req *Image) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintImage not implemented")
}

func RegisterPrintServiceServer(s *grpc.Server, srv PrintServiceServer) {
	s.RegisterService(&_PrintService_serviceDesc, srv)
}

func _PrintService_Print_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Line)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintServiceServer).Print(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PrintService/Print",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintServiceServer).Print(ctx, req.(*Line))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrintService_Blank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlankLines)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintServiceServer).Blank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PrintService/Blank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintServiceServer).Blank(ctx, req.(*BlankLines))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrintService_QR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QRCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintServiceServer).QR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PrintService/QR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintServiceServer).QR(ctx, req.(*QRCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrintService_Bar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Barcode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintServiceServer).Bar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PrintService/Bar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintServiceServer).Bar(ctx, req.(*Barcode))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrintService_PrintImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintServiceServer).PrintImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PrintService/PrintImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintServiceServer).PrintImage(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrintService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PrintService",
	HandlerType: (*PrintServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Print",
			Handler:    _PrintService_Print_Handler,
		},
		{
			MethodName: "Blank",
			Handler:    _PrintService_Blank_Handler,
		},
		{
			MethodName: "QR",
			Handler:    _PrintService_QR_Handler,
		},
		{
			MethodName: "Bar",
			Handler:    _PrintService_Bar_Handler,
		},
		{
			MethodName: "PrintImage",
			Handler:    _PrintService_PrintImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
